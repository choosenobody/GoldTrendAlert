name: Test SoSoValue ETF API

on:
  workflow_dispatch:   # 手动按钮

permissions:
  contents: write      # 若选择落盘，需要写权限

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Show inputs & env
        run: |
          echo "API url     : $BTC_ETF_API_URL"
          echo "API method  : $BTC_ETF_API_METHOD"
          echo "API headers : $BTC_ETF_API_HEADERS"
          echo "API body    : $BTC_ETF_API_BODY"
          echo "CSV url     : $BTC_ETF_FLOWS_CSV_URL"

        env:
          BTC_ETF_API_URL:     ${{ vars.BTC_ETF_API_URL }}
          BTC_ETF_API_METHOD:  ${{ vars.BTC_ETF_API_METHOD }}
          BTC_ETF_API_HEADERS: ${{ vars.BTC_ETF_API_HEADERS }}
          BTC_ETF_API_BODY:    ${{ vars.BTC_ETF_API_BODY }}
          BTC_ETF_FLOWS_CSV_URL: ${{ vars.BTC_ETF_FLOWS_CSV_URL }}

      - name: Call SoSoValue ETF API (diagnostic)
        id: call
        env:
          API_URL:     ${{ vars.BTC_ETF_API_URL }}
          API_METHOD:  ${{ vars.BTC_ETF_API_METHOD }}
          API_HEADERS: ${{ vars.BTC_ETF_API_HEADERS }}
          API_BODY:    ${{ vars.BTC_ETF_API_BODY }}
          SOSO_API_KEY: ${{ secrets.SOSOVALUE_API_KEY }}
        run: |
          set -euo pipefail

          # 默认值（如果 Variables 没设）
          API_URL="${API_URL:-https://api.sosovalue.xyz/openapi/v2/etf/historicalInflowChart}"
          API_METHOD="${API_METHOD:-POST}"
          API_BODY="${API_BODY:-{\"type\":\"us-btc-spot\"}}"

          # 合成 headers：优先使用变量里传入的 JSON；若为空，至少要有 x-soso-api-key
          HDR_JSON="${API_HEADERS:-}"
          if [ -z "$HDR_JSON" ]; then
            HDR_JSON="{\"x-soso-api-key\":\"$SOSO_API_KEY\",\"Content-Type\":\"application/json\"}"
          fi

          # 解析成 curl -H 形式
          py=$(command -v python3 || command -v python)
          cat > /tmp/mkhdr.py <<'PY'
import json, os
hdr = json.loads(os.environ["HDR_JSON"])
print(" ".join(f"-H {json.dumps(k+': '+v)}" for k,v in hdr.items()))
PY
          HDRS=$(HDR_JSON="$HDR_JSON" $py /tmp/mkhdr.py)

          # 发送请求（GET/POST 兼容）
          if [ "${API_METHOD^^}" = "GET" ]; then
            echo "[GET] $API_URL"
            curl -sS $HDRS "$API_URL" -o /tmp/resp.json
          else
            echo "[POST] $API_URL"
            curl -sS $HDRS -d "$API_BODY" "$API_URL" -o /tmp/resp.json
          fi

          # 打印统计
          cat /tmp/resp.json | $py - <<'PY'
import sys, json
j=json.load(sys.stdin)
rows=(j.get("data") or {}).get("list") or []
print("rows =", len(rows))
print("first =", rows[0] if rows else None)
print("last  =", rows[-1] if rows else None)
# 输出 GitHub 输出变量
print(f"::set-output name=rows::{len(rows)}")
PY

      - name: Fail if no rows
        if: steps.call.outputs.rows == '0'
        run: |
          echo "::error::SoSoValue 返回 0 行。请检查 SOSOVALUE_API_KEY / API_URL / METHOD / HEADERS / BODY。"
          exit 2

      # （可选）把 API 数据落盘为 CSV，供 Bot 的 CSV 回退使用
      - name: Save to CSV (.bot_state/btc_spot_etf_flows.csv)
        if: steps.call.outputs.rows != '0'
        run: |
          set -euo pipefail
          mkdir -p .bot_state
          python - <<'PY'
import json, pandas as pd
with open("/tmp/resp.json","r") as f:
    j=json.load(f)
rows=(j.get("data") or {}).get("list") or []
# 尝试识别字段名（不同版本字段名稍有不同）
# 常见：date / totalNetInflow  或  time / netInflow
import pandas as pd
df=pd.DataFrame(rows)
c_date=None
for k in ["date","time","Date","day"]:
    if k in df.columns:
        c_date=k; break
c_flow=None
for k in ["totalNetInflow","netInflow","TotalNetInflow","net_flow","netflow"]:
    if k in df.columns:
        c_flow=k; break
assert c_date and c_flow, f"cannot find date/flow columns: {df.columns.tolist()}"
df2=df[[c_date,c_flow]].copy()
df2.columns=["Date","NetFlowUSD"]
# 规范化日期与排序
df2["Date"]=pd.to_datetime(df2["Date"], errors="coerce").dt.date
df2=df2.dropna().sort_values("Date")
df2.to_csv(".bot_state/btc_spot_etf_flows.csv", index=False)
print("Wrote .bot_state/btc_spot_etf_flows.csv rows=", len(df2))
PY
          git config user.email "etl-bot@example.com"
          git config user.name  "etl-bot"
          git add .bot_state/btc_spot_etf_flows.csv
          git commit -m "auto: update btc_spot_etf_flows.csv from SoSoValue" || echo "no changes"
          git push || true
