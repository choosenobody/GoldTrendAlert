name: ETF Flows ETL (SoSoValue -> CSV; Farside fallback)

on:
  schedule:
    - cron: "0 1 * * 2-6"   # Tue-Sat 01:00 UTC (~美股收盘后)
  workflow_dispatch:

permissions:
  contents: write   # 关键：赋予写权限

jobs:
  etl:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Configure git
        run: |
          git config --global user.email "bot@example.com"
          git config --global user.name "auto-etl-bot"
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          git remote -v
          git branch --show-current || true

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install requests pandas lxml html5lib

      - name: Build CSV (SoSoValue first, Farside fallback)
        env:
          # SoSoValue（建议设为仓库 Variables）
          BTC_ETF_API_URL: ${{ vars.BTC_ETF_API_URL }}
          BTC_ETF_API_METHOD: ${{ vars.BTC_ETF_API_METHOD }}
          BTC_ETF_API_HEADERS: ${{ vars.BTC_ETF_API_HEADERS }}
          BTC_ETF_API_BODY: ${{ vars.BTC_ETF_API_BODY }}
          BTC_ETF_API_DATE_FIELD: ${{ vars.BTC_ETF_API_DATE_FIELD }}
          BTC_ETF_API_FLOW_FIELD: ${{ vars.BTC_ETF_API_FLOW_FIELD }}
          # Farside（兜底；403 时会走镜像）
          FARSIDE_ALLDATA_URL: ${{ vars.FARSIDE_ALLDATA_URL }}
        run: |
          python - <<'PY'
          import os, json, requests, pandas as pd
          def write_csv(df):
              df = df.copy()
              df.columns = ["Date","NetFlowUSD"]
              df["Date"] = pd.to_datetime(df["Date"], errors="coerce")
              df["NetFlowUSD"] = pd.to_numeric(df["NetFlowUSD"], errors="coerce")
              df = df.dropna().sort_values("Date")
              os.makedirs(".bot_state", exist_ok=True)
              out = ".bot_state/btc_spot_etf_flows.csv"
              df.to_csv(out, index=False)
              print("[OK] wrote", out, "rows:", len(df))

          def try_sosovalue():
              url = os.environ.get("BTC_ETF_API_URL")
              method = (os.environ.get("BTC_ETF_API_METHOD") or "POST").upper()
              hdrs = os.environ.get("BTC_ETF_API_HEADERS") or ""
              body = os.environ.get("BTC_ETF_API_BODY") or '{"type":"us-btc-spot"}'
              date_f = os.environ.get("BTC_ETF_API_DATE_FIELD") or "date"
              flow_f = os.environ.get("BTC_ETF_API_FLOW_FIELD") or "totalNetInflow"
              if not url:
                  return False, "no-url"
              try:
                  headers = {"User-Agent":"ETL/1.2"}
                  try: headers.update(json.loads(hdrs))
                  except: pass
                  if method=="POST":
                      try:
                          j = json.loads(body)
                          r = requests.post(url, headers=headers, json=j, timeout=30)
                      except Exception:
                          r = requests.post(url, headers=headers, data=body, timeout=30)
                  else:
                      r = requests.get(url, headers=headers, timeout=30)
                  r.raise_for_status()
                  jr = r.json()
                  data = jr.get("data", jr)
                  rows = data.get("list", []) if isinstance(data, dict) else (data if isinstance(data, list) else [])
                  if not rows: return False, "no-rows"
                  df = pd.DataFrame(rows)
                  if date_f not in df.columns or flow_f not in df.columns:
                      dcol = next((c for c in df.columns if str(c).lower() in ("date","day","datetime")), None)
                      fcol = next((c for c in df.columns if "inflow" in str(c).lower() or str(c).lower().endswith("flow")), None)
                      if not dcol or not fcol: return False, "bad-cols"
                      date_f, flow_f = dcol, fcol
                  df = df[[date_f, flow_f]].rename(columns={date_f:"Date", flow_f:"NetFlowUSD"})
                  write_csv(df)
                  return True, "sosovalue"
              except requests.HTTPError as e:
                  return False, f"http {e.response.status_code if e.response else 'http'}"
              except Exception as e:
                  return False, f"err {type(e).__name__}"

          def try_farside():
              base = os.environ.get("FARSIDE_ALLDATA_URL","https://farside.co.uk/bitcoin-etf-flow-all-data/")
              headers = {"User-Agent":"ETF-ETL/1.2"}
              def fetch(u):
                  r = requests.get(u, headers=headers, timeout=30); r.raise_for_status(); return r.text
              try:
                  html = fetch(base)
              except requests.HTTPError as e:
                  if e.response is not None and e.response.status_code==403:
                      html = fetch("https://r.jina.ai/http://farside.co.uk/bitcoin-etf-flow-all-data/")
                  else:
                      raise
              tables = pd.read_html(html)
              cand=None; best=0
              for t in tables:
                  if t.shape[1] < 2: continue
                  df = t.copy()
                  try:
                      pd.to_datetime(df.iloc[:,0], errors="raise")
                      if len(df)>best: cand=df; best=len(df)
                  except: pass
              if cand is None: raise SystemExit("No parseable table from Farside")
              df = cand[[cand.columns[0], cand.columns[-1]]].copy()
              df.columns = ["Date","NetFlowUSD"]
              write_csv(df)
              return True

          ok, src = try_sosovalue()
          if ok:
              print("[SRC] SoSoValue")
          else:
              print("[WARN] SoSoValue failed:", src, "→ try Farside…")
              ok = try_farside()
              if ok: print("[SRC] Farside (direct/mirror)")
          PY

      - name: Show files
        run: |
          ls -la
          ls -la .bot_state || true
          git status --porcelain
          echo "Current branch: $GITHUB_REF_NAME"

      - name: Commit & push CSV
        env:
          BRANCH: ${{ github.ref_name }}
        run: |
          # 强制加入（忽略 .gitignore 的影响）
          git add -f .bot_state/btc_spot_etf_flows.csv
          if git commit -m "auto: update ETF flows CSV $(date -u +%F)"; then
            git push origin HEAD:${BRANCH}
          else
            echo "No changes to commit"
          fi
